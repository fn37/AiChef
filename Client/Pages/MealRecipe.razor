@page "/mealRecipe/{Index:int}"
@using AiChef.Shared;
@using System.Text.Json;
@using System.Web;
@inject HttpClient Http;
@inject NavigationManager navigation;
@inject IJSRuntime Js;

@if (loaded == true)
{
    <div class="container mt-5 h-100">
        <div class="d-flex flex-column flex-lg-row justify-content-start">
            <div class="text-center text-lg-start">
                <img src="@recipeImageUrl" class="rounded-3 recipeImage" />
            </div>
            <div class="flex-grow-1 px-3">
                <h1 class="fw-bold">@recipe.title</h1>
                <p>@recipe.summary</p>
                <div class="text-end">
                    <button class="btn btn-warning d-print-none" @onclick="Print">Print Recipe</button>
                </div>
            </div>
        </div>
        <div class="row row-cols-1 row-cols-md-2">
            <div class="col mt-3">
                <h2>Ingredients</h2>
                <ul>
                    @foreach (var item in recipe.ingredients)
                    {
                        <li>@item</li>
                    }
                </ul>
            </div>
            <div class="col">
                <h2>Instructions</h2>
                <ul>
                    @foreach (var item in recipe.instructions)
                    {
                        <li>@item</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}
else
{
    <ChefSpinner></ChefSpinner>
}


@code {

    [CascadingParameter]
    private RecipeState? recipeState { get; set; }


    [Parameter]
    public int Index { get; set; }

    bool loaded = false; //dont display until loaded
    private string title;
    private string recipeImageUrl = string.Empty;
    private Recipe recipe;

    // private override void OnIntialized()

    protected override void OnInitialized()
    {
        GetRecipe();
    }

    private async void GetRecipe()
    {
        string baseuri = "Recipe/GetRecipe";

        try
        {
            title = recipeState.Ideas.FirstOrDefault(i => i.index == Index).title;
            RecipeParms recipeParms = new RecipeParms()
                {
                    MealTime = recipeState.MealTime,
                    Ingredients = recipeState.Ingredients,
                    SelectedIdea = title
                };

            //get Recipe image from open AI
            HttpResponseMessage responseImage = await Http.GetAsync($"Recipe/GetRecipeImage?title={HttpUtility.UrlEncode(title)}");
            var recipeImage = await responseImage.Content.ReadFromJsonAsync<RecipeImage>();
            //take first image produced;
            recipeImageUrl = recipeImage!.data[0].url;


            //get recipe
            HttpResponseMessage responseRecipe = await Http.PostAsJsonAsync(baseuri, recipeParms);
            responseRecipe.EnsureSuccessStatusCode();

            recipe = await responseRecipe.Content.ReadFromJsonAsync<Recipe>();


            loaded = true;

            StateHasChanged();


        }
        catch
        {

            Console.WriteLine("Error: Could not generate recipe");
        }


    }

    private async Task Print()
    {
        await Js.InvokeVoidAsync("printInvoke");
    }
}
